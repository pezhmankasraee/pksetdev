name: Release Tag

permissions:
  contents: write


on:
  pull_request:
    types: [opened, reopened, synchronize]
    branches:
      - main
      - master


jobs:
  create_tag:
    if: startsWith(github.head_ref, 'release-')
    runs-on: ubuntu-latest
    outputs:
      tag_name: ${{ steps.set_tag_name.outputs.tag_name }}
    steps:
      - uses: actions/checkout@v4

      - name: Extract version
        id: extract_version
        run: echo "VERSION=$(echo ${GITHUB_HEAD_REF#release-})" >> $GITHUB_ENV

      - name: Create tag
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git fetch --all
          git tag -a $VERSION -m "Release $VERSION"
          git push origin $VERSION
        env:
         VERSION: ${{ env.VERSION }}

      - name: Set tag name output
        id: set_tag_name
        run: echo "tag_name=${{ env.VERSION }}" >> $GITHUB_OUTPUT


  build_and_release:
    name: Build and Draft Release
    needs: create_tag  # This makes sure this job runs after create_tag finishes
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go (read version from go.mod)
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod  # This tells the action to use the Go version in go.mod

      - name: Build for Linux
        run: |
          GOOS=linux GOARCH=amd64 go build -ldflags "-X 'github.com/pezhmankasraee/pksetdev/help.Version=$(git describe --tags --dirty --always)'" -o pksetdev-linux

      - name: Compress Linux binary
        run: |
          tar -czvf pksetdev-linux.tar.gz pksetdev-linux
          zip pksetdev-linux.zip pksetdev-linux

      - name: Upload Linux tar.gz as artifact
        uses: actions/upload-artifact@v4
        with:
          name: pksetdev-linux-tar
          path: ./pksetdev-linux.tar.gz

      - name: Upload Linux zip as artifact
        uses: actions/upload-artifact@v4
        with:
          name: pksetdev-linux-zip
          path: ./pksetdev-linux.zip

      - name: Build for MacOS
        run: |
          GOOS=darwin GOARCH=amd64 go build -ldflags "-X 'github.com/pezhmankasraee/pksetdev/help.Version=$(git describe --tags --dirty --always)'" -o pksetdev-darwin

      - name: Compress MacOS binary
        run: |
          tar -czvf pksetdev-darwin.tar.gz pksetdev-darwin
          zip pksetdev-darwin.zip pksetdev-darwin
    
      - name: Upload Darwin tar.gz as artifact
        uses: actions/upload-artifact@v4
        with:
          name: pksetdev-darwin-tar
          path: ./pksetdev-darwin.tar.gz

      - name: Upload Darwin zip as artifact
        uses: actions/upload-artifact@v4
        with:
          name: pksetdev-darwin-zip
          path: ./pksetdev-darwin.zip

      - name: Compress source code
        run: |
          git archive --format=tar.gz -o source.tar.gz HEAD
          git archive --format=zip -o source.zip HEAD

      - name: Upload source tar.gz as artifact
        uses: actions/upload-artifact@v4
        with:
          name: source-tar
          path: ./source.tar.gz

      - name: Upload source zip as artifact
        uses: actions/upload-artifact@v4
        with:
          name: source-zip
          path: ./source.zip


  create_draft_release:
    needs: create_tag
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      tag_name: ${{ steps.create_release.outputs.tag_name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create draft release and get upload_url
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: ${{ needs.create_tag.outputs.tag_name }}
        run: |
          gh release create "$TAG" --title "$TAG" --notes "Draft release for $TAG" --draft
          sleep 5
          upload_url=$(gh release view "$TAG" --json uploadUrl -q .uploadUrl)
          echo "upload_url=$upload_url" >> $GITHUB_OUTPUT
          echo "tag_name=$TAG" >> $GITHUB_OUTPUT


  upload_assets:
    needs: [build_and_release, create_draft_release]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Download artifacts produced in build_and_release
      - name: Download Linux tar.gz artifact
        uses: actions/download-artifact@v4
        with:
          name: pksetdev-linux-tar

      - name: Download Linux zip artifact
        uses: actions/download-artifact@v4
        with:
          name: pksetdev-linux-zip

      - name: Download Darwin tar.gz artifact
        uses: actions/download-artifact@v4
        with:
          name: pksetdev-darwin-tar

      - name: Download Darwin zip artifact
        uses: actions/download-artifact@v4
        with:
          name: pksetdev-darwin-zip

      - name: Download source tar.gz artifact
        uses: actions/download-artifact@v4
        with:
          name: source-tar

      - name: Download source zip artifact
        uses: actions/download-artifact@v4
        with:
          name: source-zip

      # Upload assets to the draft release using the upload_url from create_draft_release
      - name: Upload Linux tar.gz with gh CLI
        run: gh release upload "$TAG_NAME" ./pksetdev-linux.tar.gz --clobber
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG_NAME: ${{ needs.create_draft_release.outputs.tag_name }}
 
      - name: Upload Linux zip with gh CLI
        run: gh release upload "$TAG_NAME" ./pksetdev-linux.zip --clobber
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG_NAME: ${{ needs.create_draft_release.outputs.tag_name }}
 
      - name: Upload MacOS tar.gz with gh CLI
        run: gh release upload "$TAG_NAME" ./pksetdev-darwin.tar.gz --clobber
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG_NAME: ${{ needs.create_draft_release.outputs.tag_name }}

      - name: Upload MacOS zip with gh CLI
        run: gh release upload "$TAG_NAME" ./pksetdev-darwin.zip --clobber
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG_NAME: ${{ needs.create_draft_release.outputs.tag_name }}

      - name: Upload source tar.gz with gh CLI
        run: gh release upload "$TAG_NAME" ./source.tar.gz --clobber
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG_NAME: ${{ needs.create_draft_release.outputs.tag_name }}

      - name: Upload source zip with gh CLI
        run: gh release upload "$TAG_NAME" ./source.zip --clobber
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG_NAME: ${{ needs.create_draft_release.outputs.tag_name }}
