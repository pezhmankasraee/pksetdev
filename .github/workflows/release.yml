name: Release Tag

permissions:
  contents: write

on:
  pull_request:
    types: [opened, reopened, synchronize]
    branches:
      - main
      - master

jobs:
  create_tag:
    if: startsWith(github.head_ref, 'release-')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Extract version
        id: extract_version
        run: echo "VERSION=$(echo ${GITHUB_HEAD_REF#release-})" >> $GITHUB_ENV

      - name: Create tag
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git fetch --all
          git tag $VERSION
          git push origin $VERSION
        env:
          VERSION: ${{ env.VERSION }}

  build_and_release:
    name: Build and Draft Release
    needs: create_tag  # This makes sure this job runs after create_tag finishes
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go (read version from go.mod)
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod  # This tells the action to use the Go version in go.mod

      - name: Build for Linux
        run: |
          GOOS=linux GOARCH=amd64 go build -ldflags "-X 'github.com/pezhmankasraee/pksetdev/help.Version=$(git describe --tags --dirty --always)'" -o pksetdev-linux

      - name: Compress Linux binary
        run: |
          tar -czvf pksetdev-linux.tar.gz pksetdev-linux
          zip pksetdev-linux.zip pksetdev-linux

      - name: Build for MacOS
        run: |
          GOOS=darwin GOARCH=amd64 go build -ldflags "-X 'github.com/pezhmankasraee/pksetdev/help.Version=$(git describe --tags --dirty --always)'" -o pksetdev-darwin

      - name: Compress MacOS binary
        run: |
          tar -czvf pksetdev-darwin.tar.gz pksetdev-darwin
          zip pksetdev-darwin.zip pksetdev-darwin

      - name: Compress source code
        run: |
          git archive --format=tar.gz -o source.tar.gz HEAD
          git archive --format=zip -o source.zip HEAD

      - name: Create draft release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.create_tag.outputs.tag }}  # Use the tag created in previous job
          release_name: Release ${{ needs.create_tag.outputs.tag }}
          draft: true
          prerelease: false

      - name: Upload Linux tar.gz
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./myapp-linux.tar.gz
          asset_name: myapp-linux.tar.gz
          asset_content_type: application/gzip

      # Repeat upload-release-asset for each file (darwin tar.gz, linux zip, darwin zip, source.tar.gz, source.zip)
