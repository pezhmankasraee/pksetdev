name: Build and Draft Release

permissions:
  contents: write


on:
  pull_request:
    types: [opened, reopened, synchronize]
    branches:
      - main
      - master


jobs:
  build_and_release:
    if: startsWith(github.head_ref, 'release-v')
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.get_tag.outputs.tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract version
        id: extract_version
        run: |
          VERSION=$(echo "${GITHUB_REF#refs/heads/release-v}")
          echo "VERSION=v$VERSION" >> $GITHUB_ENV
          echo "tag=v$VERSION" >> $GITHUB_OUTPUT

      - name: Determine branch name
        id: branch_name
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            BRANCH="${{ github.head_ref }}"
          else
            BRANCH="${GITHUB_REF#refs/heads/}"
          fi
          echo "branch=$BRANCH" >> $GITHUB_OUTPUT

      - name: Checkout release branch tip
        run: |
          git fetch origin ${{ steps.branch_name.outputs.branch }}
          git checkout ${{ steps.branch_name.outputs.branch }}

      - name: Fetch all tags
        run: git fetch --tags --force

      - name: Get latest tag
        id: get_tag
        run: |
          TAG=$(git tag --points-at HEAD | head -n 1)
          if [ -z "$TAG" ]; then
            echo "No tag found, using commit hash."
            exit 1
          fi
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Print tag
        run: echo "Tag is ${{ steps.get_tag.outputs.tag }}"

      - name: Set up Go (read version from go.mod)
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod  # This tells the action to use the Go version in go.mod

      ## build and compress packages
      - name: Build for Linux
        run: |
          GOOS=linux GOARCH=amd64 go build -ldflags "-X 'github.com/pezhmankasraee/pksetdev/help.Version=$(git describe --tags --dirty --always)'" -o pksetdev-linux

      - name: Compress Linux binary
        run: |
          tar -czvf pksetdev-linux.tar.gz pksetdev-linux
          zip pksetdev-linux.zip pksetdev-linux

      - name: Upload Linux tar.gz as artifact
        uses: actions/upload-artifact@v4
        with:
          name: pksetdev-linux-tar
          path: ./pksetdev-linux.tar.gz

      - name: Upload Linux zip as artifact
        uses: actions/upload-artifact@v4
        with:
          name: pksetdev-linux-zip
          path: ./pksetdev-linux.zip

      - name: Build for MacOS
        run: |
          GOOS=darwin GOARCH=amd64 go build -ldflags "-X 'github.com/pezhmankasraee/pksetdev/help.Version=$(git describe --tags --dirty --always)'" -o pksetdev-darwin

      - name: Compress MacOS binary
        run: |
          tar -czvf pksetdev-darwin.tar.gz pksetdev-darwin
          zip pksetdev-darwin.zip pksetdev-darwin

      - name: Upload Darwin tar.gz as artifact
        uses: actions/upload-artifact@v4
        with:
          name: pksetdev-darwin-tar
          path: ./pksetdev-darwin.tar.gz

      - name: Upload Darwin zip as artifact
        uses: actions/upload-artifact@v4
        with:
          name: pksetdev-darwin-zip
          path: ./pksetdev-darwin.zip

      - name: Compress source code
        run: |
          git archive --format=tar.gz -o source.tar.gz HEAD
          git archive --format=zip -o source.zip HEAD

      - name: Upload source tar.gz as artifact
        uses: actions/upload-artifact@v4
        with:
          name: source-tar
          path: ./source.tar.gz

      - name: Upload source zip as artifact
        uses: actions/upload-artifact@v4
        with:
          name: source-zip
          path: ./source.zip


  create_draft_release:
    needs: build_and_release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      tag_name: ${{ steps.create_release.outputs.tag_name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create draft release and get upload_url
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: ${{ needs.build_and_release.outputs.tag }}
        run: |
          echo "TAG: $TAG"
          gh release create "$TAG" --title "$TAG" --notes "Draft release for $TAG" --draft
          sleep 5
          upload_url=$(gh release view "$TAG" --json uploadUrl -q .uploadUrl)
          echo "upload_url=$upload_url" >> $GITHUB_OUTPUT
          echo "tag_name=$TAG" >> $GITHUB_OUTPUT


  upload_assets:
    needs: [build_and_release, create_draft_release]
    runs-on: ubuntu-latest
    env:
      TAG_NAME: ${{ needs.build_and_release.outputs.tag }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Print tag in upload_assets
        run: echo "Tag is $TAG_NAME"

      # Download artifacts produced in build_and_release
      - name: Download Linux tar.gz artifact
        uses: actions/download-artifact@v4
        with:
          name: pksetdev-linux-tar

      - name: Download Linux zip artifact
        uses: actions/download-artifact@v4
        with:
          name: pksetdev-linux-zip

      - name: Download Darwin tar.gz artifact
        uses: actions/download-artifact@v4
        with:
          name: pksetdev-darwin-tar

      - name: Download Darwin zip artifact
        uses: actions/download-artifact@v4
        with:
          name: pksetdev-darwin-zip

      - name: Download source tar.gz artifact
        uses: actions/download-artifact@v4
        with:
          name: source-tar

      - name: Download source zip artifact
        uses: actions/download-artifact@v4
        with:
          name: source-zip

      # Upload assets to the draft release using the upload_url from create_draft_release
      - name: Upload Linux tar.gz with gh CLI
        run: gh release upload "$TAG_NAME" ./pksetdev-linux.tar.gz --clobber
 
      - name: Upload Linux zip with gh CLI
        run: gh release upload "$TAG_NAME" ./pksetdev-linux.zip --clobber

      - name: Upload MacOS tar.gz with gh CLI
        run: gh release upload "$TAG_NAME" ./pksetdev-darwin.tar.gz --clobber

      - name: Upload MacOS zip with gh CLI
        run: gh release upload "$TAG_NAME" ./pksetdev-darwin.zip --clobber

      - name: Upload source tar.gz with gh CLI
        run: gh release upload "$TAG_NAME" ./source.tar.gz --clobber

      - name: Upload source zip with gh CLI
        run: gh release upload "$TAG_NAME" ./source.zip --clobber